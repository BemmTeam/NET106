@using System.Reflection
@using System.ComponentModel
@using ASM.SERVER.Helper
@using ASM.SERVER.HttpInterfaces
@using ASM.SHARE.Dtos
@using ASM.SHARE.Dtos.DropBox
@using ASM.SHARE.Helper
@using ASM.SHARE.Models

@using System.Net.Http.Headers


@*Modal*@
<div class="modal fade show " id="myModal" style="display:block; background-color: rgba(10,10,10,.8);  "  aria-modal="true" role="dialog">
  <div class="modal-dialog modal-dialog-centered " style="min-width:50%">
    <div class="modal-content">
      <div class="modal-header  bg-success ">
        <h5 class="modal-title text-light" id="exampleModalLabel">Thêm danh mục mới</h5>
        <button type="button" class="btn-close btn-danger text-light fs-3" @onclick="@ModalCancel" data-bs-dismiss="modal" aria-label="Close">X</button>
      </div>
      <div class="modal-body">
            
          
          <EditForm class="row" Model="@product" OnValidSubmit="@ModalOk">
              <DataAnnotationsValidator />
                  <div class="col-6">
                         <div class="mb-3">
                            <label for="exampleInputEmail1" class="form-label">Tên sản phẩm</label>
                            <InputText  @bind-Value="@product.Name" class="form-control"></InputText>
                            <ValidationMessage For="() => product.Name" class="badge bg-danger mt-1"></ValidationMessage>
                          </div>
                  </div>

                   <div class="col-6">
                         <div class="mb-3">
                            <label for="exampleInputEmail1" class="form-label">Số lượng</label>
                            <InputNumber  @bind-Value="@product.Quantity" class="form-control"></InputNumber>
                            <ValidationMessage For="() => product.Quantity" class="badge bg-danger mt-1"></ValidationMessage>
                          </div>
                  </div>

                  <div class="col-6">
                         <div class="mb-3">
                            <label for="exampleInputEmail1" class="form-label">Mô tả</label>
                            <InputText  @bind-Value="@product.Desc" class="form-control"></InputText>
                            <ValidationMessage For="() => product.Desc" class="badge bg-danger mt-1"></ValidationMessage>
                          </div>
                  </div>

                   <div class="col-6">
                         <div class="mb-3">
                            <label for="exampleInputEmail1" class="form-label">Giá sản phẩm</label>
                            <InputNumber  @bind-Value="@product.Price" class="form-control"></InputNumber>
                            <ValidationMessage For="() => product.Price" class="badge bg-danger mt-1"></ValidationMessage>
                          </div>
                  </div>

                  
                            <div class="col-6">
                         <div class="mb-3">
                            <label for="exampleInputEmail1" class="form-label">Địa chỉ</label>
                            <InputText  @bind-Value="@product.Address" class="form-control"></InputText>
                            <ValidationMessage For="() => product.Address" class="badge bg-danger mt-1"></ValidationMessage>
                          </div>
                  </div>

                   
                         <div class="col-6">
                         <div class="mb-3">
                            <label class="form-label">Danh mục</label>
                                 <InputSelect @bind-Value="product.CategoryId" class="form-control">
                                      <option value="">Lựa chọn danh mục</option>

                                        @foreach (var category in Categories)
                                        {
                                            <option value="@category.CategoryId"> @category.Name </option>
                                        }

                                </InputSelect>
                                                                  
                            <ValidationMessage For="() => product.CategoryId" class="badge bg-danger mt-1"></ValidationMessage>
                          </div>
                         </div>

                 <div class="col-12">
                         <div class="mb-3">
                            
                            

                                  @if (responeUploadFile != null)
                                 {
                                     <div class="row">
                                        <img src="@responeUploadFile.Thumb" width="100" height="100" class="col-3" />
                                          <div class="col-9">
                                               <h7 class="text-success"> @responeUploadFile.Message</h7>
                                               <hr/>
                                            <span><span class="fw-bold">File Name: </span> @responeUploadFile.Name</span>
                                            <span><span class="fw-bold">Size: </span> @responeUploadFile.Size</span>
                                            <span><span class="fw-bold">Path: </span>: @responeUploadFile.Path</span>

                                          </div>
                                     </div>
                                   

                                 }
                            else
                            {
                            <FileUpload   Accept="image/*" StateMode="1"  HideFooter OnUploadStarted="initJs"  UploadUrl="https://localhost:5001/api/DropboxClient/UploadFile" OnUploadCompleted="OnUploadCompleted"  DropZone="true" ShowProgress="true"></FileUpload>
                                
                            }
                            
                            @*<InputFile  OnChange="(e) => file = e.File"  class="form-control"></InputFile>*@
                            <span class="badge bg-info"></span>
                          </div>
                  </div>
                  <div class="d-flex justify-content-center">

                 <button type="submit" class="btn btn-success col-8 " >Tạo người dùng</button>

                  </div>

          </EditForm>
            
    
    
       </div>
      <div class="modal-footer">

        <button type="button" class="btn btn-secondary"  @onclick="@ModalCancel" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>



@inject IProductHttp productHttpRepo
@using Smart.Blazor;
@code {
    private UploadResponse  responeUploadFile;


    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Inject]
    private ICategoryHttp categoryHttpRepo { get; set; }

    [Inject]
    private ToastHelper toastService { get; set; }

    [Inject]
    private IJSRuntime jSRuntime { get; set; }

    [Inject]
    private QRcodeHelper qRcodeHelper { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    private List<ASM.SHARE.Entities.Category> Categories  = new();
    private Product product = new();

    protected override async Task OnInitializedAsync()
    {
        Categories = await categoryHttpRepo.GetCategoriesAsync();

    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private async Task ModalOk()
    {
        if(responeUploadFile == null) 
        {
            toastService.ShowError("Vui lòng chọn hình ảnh !");
            return;
        }
        string host = navigationManager.BaseUri;
        Guid id = Guid.NewGuid();
        string path = responeUploadFile.Path;

        ProductDto productDto = new()
            {
                ProductId = id  ,
                Name = product.Name,
                Price = product.Price,
                ImageUrl = path,
                Desc = product.Desc,
                Quantity = product.Quantity,
                CategoryId = product.CategoryId,
                Address = product.Address,
            };

        var result = await productHttpRepo.CreateAsync(productDto);
        if(result.IsSuccess)
        {

            toastService.ShowSuccess(result.Message);
        }
        else
        {
            toastService.ShowError(result.Message);

        }

        await OnClose.InvokeAsync(result.IsSuccess);

    }

    private string GetDisplayName( PropertyInfo propInfo)
    {
        var attribute = propInfo.GetCustomAttributes(typeof(DisplayNameAttribute), true)
      .Cast<DisplayNameAttribute>().SingleOrDefault();
        if (attribute == null)
            return null;

        return attribute.DisplayName;

    }
  

    
    [JSInvokable]
    public void setData(string val)
    {
        if (!string.IsNullOrEmpty(val))
        {
            responeUploadFile = Newtonsoft.Json.JsonConvert.DeserializeObject<UploadResponse>(val);
            StateHasChanged();
        }

    }
    private async Task initJs(Event e)
    {

        var obj = DotNetObjectReference.Create(this);
        await jSRuntime.InvokeVoidAsync("insertResponseHandler" , obj);

    }
    private  void OnUploadCompleted(Event e)
    {

        FileUploadUploadCompletedEventDetail dt = e["Detail"];
        if (dt.Status == 200)
        {
             toastService.ShowSuccess("Tải lên thành công !");
        }
        else
        {
              toastService.ShowError("Tải thất bại");
        }
    }

}
