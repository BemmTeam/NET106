@using System.Reflection


@*Modal*@
<div class="modal fade show  " id="myModal" style="display:block; background-color: rgba(10,10,10,.8);"  aria-modal="true" role="dialog">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
        <button type="button" class="btn-close" @onclick="@ModalCancel" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
          <h3>@fields.Count()</h3>
            @foreach(var item in fields)
            {
                <h2>@item.Name</h2>
            }
       </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary"  @onclick="@ModalCancel" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary"  @onclick="@ModalOk">Save changes</button>
      </div>
    </div>
  </div>
</div>



@code {

    [Parameter]
    public Type Model { get; set; }


    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private PropertyInfo[] fields;
    protected override Task OnInitializedAsync()
    {
        fields = Model.GetProperties();

            return base.OnInitializedAsync();
        }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
}
